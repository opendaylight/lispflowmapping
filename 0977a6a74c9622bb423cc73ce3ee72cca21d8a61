{
  "comments": [
    {
      "key": {
        "uuid": "1aa4ed85_48f4ed5a",
        "filename": "mappingservice/api/src/main/java/org/opendaylight/lispflowmapping/interfaces/mapcache/IMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1966
      },
      "writtenOn": "2015-12-21T15:21:28Z",
      "side": 1,
      "message": "Do we really need to expose map-cache internals in the API? I guess that If we switch to a different implementation where we don\u0027t use subkeys, this won\u0027t be useful.",
      "range": {
        "startLine": 34,
        "startChar": 29,
        "endLine": 34,
        "endChar": 42
      },
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_335fa2e7",
        "filename": "mappingservice/api/src/main/java/org/opendaylight/lispflowmapping/interfaces/mapcache/IMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 491
      },
      "writtenOn": "2015-12-21T17:31:01Z",
      "side": 1,
      "message": "I thought I make it generic, so that we can potentially reuse this for subkeys keys that are not xTR-ID. This is better than addMapping(Eid key, byte[] xtrId, Object data, boolean shouldOverwrite) IMO, but I can do that too. If that\u0027s not what you meant, I don\u0027t know how to make this more self-contained, but MappingRecord and/or xTR-ID agnostic.",
      "parentUuid": "1aa4ed85_48f4ed5a",
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_33d4821f",
        "filename": "mappingservice/api/src/main/java/org/opendaylight/lispflowmapping/interfaces/mapcache/IMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1966
      },
      "writtenOn": "2015-12-21T17:56:20Z",
      "side": 1,
      "message": "Hm, actually I was thinking about something less generic, very xtr-id specific and my complaint stemmed from the name of the parameter. I was thinking subkey in the sense we use within the map-cache implementations, but after your comment I understood this is the xtr-id value that is being looked up. So, we\u0027re doing a \u0027path lookup\u0027, where the path has 2 elements, the eid value and the xtr-id value. \nIf we stick to paths this short, I\u0027m fine with it (although the name is a bit confusing to me).  But if we plan to extend this to even more layers, we need to come up with something more scalable.",
      "parentUuid": "1aa4ed85_335fa2e7",
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_53c01e50",
        "filename": "mappingservice/api/src/main/java/org/opendaylight/lispflowmapping/interfaces/mapcache/IMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 491
      },
      "writtenOn": "2015-12-21T18:05:04Z",
      "side": 1,
      "message": "In this case subkey is any kind of discriminator between multiple mappings, since the code creates a DAO subkey called address_list, in addition to address, where we store mappings. Right now we use xTR-IDs as keys in the address_list, be we can use something else for other use cases. I can rename subkey -\u003e secodaryKey if that\u0027s more intuitive, or just use xtrId if we want to nail it down. I\u0027m open to other suggestions too, since I\u0027m terrible with naming.",
      "parentUuid": "1aa4ed85_33d4821f",
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_4505b30f",
        "filename": "mappingservice/api/src/main/java/org/opendaylight/lispflowmapping/interfaces/mapcache/IMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1966
      },
      "writtenOn": "2015-12-22T11:15:48Z",
      "side": 1,
      "message": "Yes, I finally understood its meaning. But some comments to your comment :)\n1. \"address_list\" is a deceiving subkey string name from my perspective. We\u0027re not storing a list of mappings but a hash table keyed by some object (in our favorite example case, an xtr-id). \n2. I\u0027m not sure what I prefer, subkey or secondaryKey. The latter is often used with databases, but I think it\u0027s semantic is more specific. To me it was confusing because I thought it was the string representation of a subkey we use within the caches. Just leave it as is, I guess. \n3. As mentioned in a different comment, are we sure we will never have more than 1 branch under the eid? If we\u0027re not sure, then we should name the sub-tables instead of using the generic \"address_list\".",
      "parentUuid": "1aa4ed85_53c01e50",
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_e2b6158a",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1966
      },
      "writtenOn": "2015-12-22T11:15:48Z",
      "side": 1,
      "message": "Are we sure we\u0027ll never branch out 2 ways? I\u0027m getting a bit lost with all the changes we\u0027re pushing in now so I can\u0027t tell if that\u0027s the case. It might very well be that we\u0027ll never do that. But if we do, we need to \u0027name\u0027 the sub-table.",
      "range": {
        "startLine": 86,
        "startChar": 12,
        "endLine": 86,
        "endChar": 74
      },
      "revId": "0977a6a74c9622bb423cc73ce3ee72cca21d8a61",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}