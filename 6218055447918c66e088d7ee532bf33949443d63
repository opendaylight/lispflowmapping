{
  "comments": [
    {
      "key": {
        "uuid": "da33351e_f0e1ae9b",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-01-09T09:01:24Z",
      "side": 1,
      "message": "you have this in RECORD.timestamp, right? only need to find the new min if A) new xTR_ID is same as RECORD xTR_ID or B) RECORD.timestamp is expired.",
      "range": {
        "startLine": 119,
        "startChar": 84,
        "endLine": 119,
        "endChar": 86
      },
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_f08feeca",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 491
      },
      "writtenOn": "2016-01-09T09:30:32Z",
      "side": 1,
      "message": "Yes, but in practice, with xTRs registering periodically in order, we will always have case 1)\n\nxtr1 567 - 567-xtr1\nxtr2 569 - 567-xtr1\nxtr3 572 - 567-xtr1\n\nxtr1 627 - 569-xtr2\nxtr2 629 - 572-xtr3\nxtr3 632 - 627-xtr1\n\nI initially had the check, but removed it to decrease the amount of \"if\"s we have (which is a lot for merging).",
      "parentUuid": "da33351e_f0e1ae9b",
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_50ee9a8c",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-01-09T09:01:24Z",
      "side": 1,
      "message": "good catch!",
      "range": {
        "startLine": 179,
        "startChar": 15,
        "endLine": 179,
        "endChar": 16
      },
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_30f31675",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-01-09T09:01:24Z",
      "side": 1,
      "message": "what is the key that we dont have here? we have the EID",
      "range": {
        "startLine": 261,
        "startChar": 39,
        "endLine": 261,
        "endChar": 48
      },
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_b08566af",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 491
      },
      "writtenOn": "2016-01-09T09:30:32Z",
      "side": 1,
      "message": "The original EID is not the key, since we might have iterated the mask: original EID for lookup was 1.1.1.1/32, but the one we found in DAO was 1.1.1.0/24. So we need the second one to directly remove the entry with dao.removeSpecific().",
      "parentUuid": "da33351e_30f31675",
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_9012e260",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1966
      },
      "writtenOn": "2016-01-09T11:29:19Z",
      "side": 1,
      "message": "Then use getDaoPairEntryBest() instead of getDaoEntryBest() above.",
      "parentUuid": "da33351e_b08566af",
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_70175e52",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 1966
      },
      "writtenOn": "2016-01-09T11:29:19Z",
      "side": 1,
      "message": "As far as I can tell, this should serve the same purpose like the one above (getMappingLpmEid) but instead it returns the {Eid, Object} pair. The only place it is used (in the patch), you just do res.getValue(). So is it worth the extra effort to build the SimpleImmutableEntry?",
      "range": {
        "startLine": 273,
        "startChar": 4,
        "endLine": 273,
        "endChar": 103
      },
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da33351e_9b09632f",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/mapcache/SimpleMapCache.java",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 491
      },
      "writtenOn": "2016-01-09T11:44:31Z",
      "side": 1,
      "message": "Agreed. I will keep the changes in the body of the method, in case we ever need this for some reason, but use the other one instead. Thanks.",
      "parentUuid": "da33351e_70175e52",
      "revId": "6218055447918c66e088d7ee532bf33949443d63",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}