<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- NOTE: Tags we removed: SCM: We don't use maven to pull and push code, so
             the SCM section does not appear to be needed. See http://maven.apache.org/scm/maven-scm-plugin/usage.html

       NOTE: Our ultimate goal is to remove this pom, and move everything in here
             up to ODL parent or the root of this project, depending on
             its relevance. Only the logical root should reference this file. -->

  <parent>
    <!-- We want to inherit of ODL parent so we can inherit common third party
         versions etc instead of redefining them here. Also we get some common definitions
         for plugin configuration etc. -->
    <groupId>org.opendaylight.odlparent</groupId>
    <artifactId>odlparent</artifactId>
    <version>7.0.2</version>
    <relativePath/>
  </parent>

  <groupId>org.opendaylight.lispflowmapping</groupId>
  <artifactId>lispflowmapping-commons</artifactId>
  <version>1.12.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <!-- <name> formatting is used by autorelease to parse and notify projects on
       build failure. Please do not modify this unless you have a good reason. -->
  <name>ODL :: lispflowmapping :: ${project.artifactId}</name>

  <properties>
    <branding.version>2.0.2</branding.version>
    <build.suffix>1.0.0</build.suffix>
    <forwardingrulesmanager.version>0.5.0</forwardingrulesmanager.version>
    <lispflowmapping.version>1.12.0-SNAPSHOT</lispflowmapping.version>
    <neutron.version>0.15.0-SNAPSHOT</neutron.version>
    <nsf.version>0.15.0-SNAPSHOT</nsf.version>
    <restconf.version>1.12.0-SNAPSHOT</restconf.version>
    <sal.version>0.19.0-SNAPSHOT</sal.version>
    <salGeneratorPath>src/main/yang-gen-sal</salGeneratorPath>
    <statisticsmanager.version>0.5.0</statisticsmanager.version>
    <yang.src.path>src/main/yang</yang.src.path>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- NOTE: The "Type" jar is considered default. You only need to specify
                 the type when it is something other than jar. -->
      <dependency>
        <groupId>org.opendaylight.mdsal</groupId>
        <artifactId>mdsal-artifacts</artifactId>
        <version>6.0.1</version>
        <type>pom</type>
       <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>junit-addons</groupId>
        <artifactId>junit-addons</artifactId>
        <version>1.4</version>
      </dependency>
      <dependency>
        <groupId>org.jmock</groupId>
        <artifactId>jmock</artifactId>
        <version>2.6.0</version>
      </dependency>
      <dependency>
        <groupId>org.jmock</groupId>
        <artifactId>jmock-legacy</artifactId>
        <version>2.6.0</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.controller</groupId>
        <artifactId>controller-artifacts</artifactId>
        <version>2.0.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>common.build.tools</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>lispflowmapping-code-commons</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>lispflowmapping-commons</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.api</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.implementation</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.inmemorydb</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <!--
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.neutron</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      -->
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.northbound</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.shell</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.southbound</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.lisp-proto</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>mappingservice.config</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>common.unittest.tools</artifactId>
        <version>${lispflowmapping.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.lispflowmapping</groupId>
        <artifactId>ui-lispflowmapping</artifactId>
        <version>${lispflowmapping.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <!-- This configures the sort pom plugin to sort properties, dependencies
               etc during a build. It helps to ensure consistent poms that are easy to read.
               While the configuration should exist at a root level it is still up to the
               individual projects to invoke it by defining the plugin in the build->plugins
               section. -->
          <groupId>com.google.code.sortpom</groupId>
          <artifactId>maven-sortpom-plugin</artifactId>
          <version>2.2.1</version>
          <configuration>
            <createBackupFile>false</createBackupFile>
            <encoding>${project.build.sourceEncoding}</encoding>
            <keepBlankLines>true</keepBlankLines>
            <lineSeparator>\n</lineSeparator>
            <nrOfIndentSpace>2</nrOfIndentSpace>
            <predefinedSortOrder>custom_1</predefinedSortOrder>
            <sortDependencies>scope,groupId,artifactId</sortDependencies>
            <sortPlugins>groupId,artifactId</sortPlugins>
            <sortProperties>true</sortProperties>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>sort</goal>
              </goals>
              <phase>verify</phase>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.4</version>
        </plugin>
        <plugin>
          <!-- TODO move up to ODL parent. -->
          <!-- This is required to make sure that we delete the files which are
               being generated under the src/main directory since by default only files
               under target get cleaned up. Because the clean plugin is automatically invoked
               you do NOT need to specify it in the build->plugin section. You would only
               want to override this if you have additional folders which need to be cleaned
               up. -->
          <artifactId>maven-clean-plugin</artifactId>
          <configuration>
            <filesets>
              <fileset>
                <directory>${salGeneratorPath}</directory>
                <includes>
                  <include>**</include>
                </includes>
              </fileset>
            </filesets>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jxr-plugin</artifactId>
          <version>2.3</version>
          <configuration>
            <aggregate>true</aggregate>
            <linkJavadoc>true</linkJavadoc>
            <javadocDir>target/apidocs</javadocDir>
          </configuration>
        </plugin>
        <plugin>
          <!-- TODO: This should be in ODL parent -->
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <executions>
            <execution>
              <id>add-source</id>
              <goals>
                <goal>add-source</goal>
              </goals>
              <phase>generate-sources</phase>
              <configuration>
                <sources>
                  <source>${yang.src.path}</source>
                  <source>${salGeneratorPath}</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <versionRange>[0.0,)</versionRange>
                    <goals>
                      <goal>set-system-properties</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <versionRange>[0.0,)</versionRange>
                    <goals>
                      <goal>prepare-agent</goal>
                      <goal>pre-test</goal>
                      <goal>post-test</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.ops4j.pax.exam</groupId>
                    <artifactId>maven-paxexam-plugin</artifactId>
                    <versionRange>[1.2.4,)</versionRange>
                    <goals>
                      <goal>generate-depends-file</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
