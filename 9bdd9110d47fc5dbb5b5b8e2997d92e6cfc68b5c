{
  "comments": [
    {
      "key": {
        "uuid": "ba51214e_4c2c1148",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-06-22T18:55:19Z",
      "side": 1,
      "message": "The itrRloc is used as the identifier of the subscriber. Basically we are subscribing the itrRloc to the EID mapping. So it does not make sense to  do any subscription if there are no itrRlocs. \nMaybe what you intended to do is to do a subscription if the EID didnt exist (i.e. there were no mappings for it) and so there was a negative map reply? In that case also, because of the radix tree which has to find the longest prefix match, doing so for maskable EIDs is more complicated than this. For non-maskable I suppose it should be fine, although in general it does introduce a security risk by allowing unknown entities to consume unbounded memory in our service.",
      "range": {
        "startLine": 96,
        "startChar": 14,
        "endLine": 96,
        "endChar": 42
      },
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_a5306557",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 656
      },
      "writtenOn": "2016-06-22T10:23:31Z",
      "side": 1,
      "message": "if the itrRloc is empty, we need to make sure that the EID is non mask-able, and only then allow the subscription.\nSo there are two options for subscription:\n1. An EID with existing RLOCS\n2. An EID with no RLOCS, and the EID is non mask-able like distinguished name.",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_e0736baf",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1966
      },
      "writtenOn": "2016-06-22T12:06:55Z",
      "side": 1,
      "message": "This will result in an NPE if itrRlocs is null! Also, what\u0027s the intended use-case? If itr-rlocs is null, the map-server has no rloc to push an SMR to on mapping update.",
      "range": {
        "startLine": 97,
        "startChar": 38,
        "endLine": 97,
        "endChar": 53
      },
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_6945876f",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 491
      },
      "writtenOn": "2016-06-22T16:29:22Z",
      "side": 1,
      "message": "I\u0027ve been thinking about this a bit, and here are my thoughts. The way the code is right now (before this patch) is actually buggy. We could have the situation where ODL is running on an IPv6-only node, receives the Map-Request over IPv6, but chooses the first ITR-RLOC as a subscriber RLOC, which is IPv4, supposing the xTR sending it is dual-homed. So SMRs will not reach the xTR.\n\nITR-RLOC was added to Map-Requests for deployments where the mapping system is not proxy-replying, but instead is forwarding encapsulated requests to an ETR, which is the device sending the reply, and may have different connectivity.\n\nI think we should instead save the actual source RLOC here, since we\u0027re proxy-replying. We already added the source-rloc to the metadata in Map-Registers, we could do the same with Map-Requests.\n\nAlternatively, we can use source-rloc, when ITR-RLOC is not available, and use ITR-RLOC, when it is, but choose an ITR-RLOC that\u0027s the same AFI than the original source RLOC. This last, most complicated processing mode would be necessary for the unlikely case when a router uses a different source address for sending the Encapsulated Map-Request, than it can listen on.",
      "parentUuid": "ba51214e_e0736baf",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_ac3a0dcb",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1966
      },
      "writtenOn": "2016-06-22T17:18:57Z",
      "side": 1,
      "message": "Yep, the cross AFI communication scenario is broken. As you propose, we could save the source rloc as subscriber, however we can do that only if it is part of the itr-rlocs list (and it may not!), otherwise we\u0027re not protocol compliant. Fundamentally this boils down to our inability to check the routing table of the host (could we check it?). And to make the point, even if we saved the source rloc we still can\u0027t be certain we have a route back to the xtr (asymmetric routing)",
      "parentUuid": "ba51214e_6945876f",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_ac4b2d2a",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 491
      },
      "writtenOn": "2016-06-22T18:04:52Z",
      "side": 1,
      "message": "IIRC, the protocol specifies the ITR-RLOCs for use of sending Map-Replies. The way we handle SMRs is not in the spec anyway, so I don\u0027t think sending back to the source-rloc would be a protocol violation. If we received a datagram from a certain source address, the probability is quite high we can send something back there. And if we hit asymmetric routing issues, I would say it\u0027s not the MS/MRs job to deal with that. That said, I don\u0027t mind using the source-rloc as a subscriber only if it\u0027s part of the ITR-RLOC list, if it exists.",
      "parentUuid": "ba51214e_ac3a0dcb",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_acce8d81",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-06-22T18:55:19Z",
      "side": 1,
      "message": "So this issue came up a couple of weeks ago I think with Florin. Currently we are sending the MapReply to the Source RLOC of the Map Request I think. So for subscription, it makes sense to also choose the Map-Request Source RLOC if it exists within the ITR-RLOCs list. If it doesnt, we should still choose an ITR RLOC with the same AFI as the source of the Map Request. If no such IP exists in the ITR RLOCs list, then we can be opportunistic and pick the first one. I\u0027ll add a card to do so. But this is all somewhat independent of the goal of this patch, and should be done in a separate patch.",
      "parentUuid": "ba51214e_ac4b2d2a",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51214e_2cbb9de6",
        "filename": "mappingservice/implementation/src/main/java/org/opendaylight/lispflowmapping/implementation/lisp/MapResolver.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 654
      },
      "writtenOn": "2016-06-22T18:55:19Z",
      "side": 1,
      "message": "itrRloc is used to do the subscription, as the identifier of the device which is subscribing(subscriber). So without an itrRloc, the updateSubscribers() does not work and should not be called.\nRegarding the two option, I think you are referring to the EID that an itr can subscribe to (subject/topic of subscription). So assuming that, I agree that for maskable EIDs, only EIDs with existing mappings can be topic/subject of a subscription, which is what the code does without this patch. \n\nRegarding the non-maskable EIDs without RLOCs, the security caveat mentioned above is the main issue I see with it.",
      "parentUuid": "ba51214e_a5306557",
      "revId": "9bdd9110d47fc5dbb5b5b8e2997d92e6cfc68b5c",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}