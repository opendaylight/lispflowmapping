{
  "comments": [
    {
      "key": {
        "uuid": "fafc7978_09250f0a",
        "filename": "mappingservice/neutron/pom.xml",
        "patchSetId": 14
      },
      "lineNbr": 21,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "Please remove the \u003cproperties\u003e section and use explicit versions in the \u003cdependencyManagement\u003e section.",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_697dbbe7",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/GroupBasedPolicyNeutronIntentHandlerBean.java",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "All caps should only be used with very important warnings/errors, in this case I would just use normal capitalization.",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_ddaa9e84",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/GroupBasedPolicyNeutronIntentHandlerBean.java",
        "patchSetId": 14
      },
      "lineNbr": 51,
      "author": {
        "id": 6491
      },
      "writtenOn": "2017-03-16T16:34:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_697dbbe7",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_15e36034",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VbridgeTopologyListener.java",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "Is it worth handling SUBTREE_MODIFIED as well here (and calling handleVbridgeTopologyWrite()), or you think that should never occur during normal operation?",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_7d93b24f",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VbridgeTopologyListener.java",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 6491
      },
      "writtenOn": "2017-03-16T16:34:28Z",
      "side": 1,
      "message": "It\u0027s not needed right now for the goal of this is to mostly follow VBD\u0027s way of achieving host\u0027s tenant intf info (vxlan endpoint for them, RLOC for us). GBP puts this vbridge topology in MDSAL, and when there are some changes, they delete the old info and put a new vbridge topology. So, there is no point.",
      "parentUuid": "fafc7978_15e36034",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_35194423",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VppEndpointListener.java",
        "patchSetId": 14
      },
      "lineNbr": 116,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "s/mdification/modification/",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_bdb4fad1",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VppEndpointListener.java",
        "patchSetId": 14
      },
      "lineNbr": 116,
      "author": {
        "id": 6491
      },
      "writtenOn": "2017-03-16T16:34:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_35194423",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_d520b8b2",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VppEndpointListener.java",
        "patchSetId": 14
      },
      "lineNbr": 193,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "This is more of a question than a comment, do we want this implemented before Carbon ships? In that case we should make a note somewhere (like a Trello card) so we don\u0027t forget.",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_ddaf3e7c",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/listener/VppEndpointListener.java",
        "patchSetId": 14
      },
      "lineNbr": 193,
      "author": {
        "id": 6491
      },
      "writtenOn": "2017-03-16T16:34:28Z",
      "side": 1,
      "message": "Technically, we don\u0027t need to. Because, technically, it doesn\u0027t affect us that much yet. Yes, we will have some abundant mapping record. But it\u0027s not like GBP triggers a delete when particular VPP node goes down. It more of triggers a delete when it changes. For us, the change, we don\u0027t need to delete it. So, we are okay. But maybe, good to do. So, this one is definitely up for discussion.",
      "parentUuid": "fafc7978_d520b8b2",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_a781874f",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/util/InfoUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 491
      },
      "writtenOn": "2017-03-16T13:02:50Z",
      "side": 1,
      "message": "It\u0027s worth adding an empty private constructor to avoid instantiation, like our other utility classes with only static methods.",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_9dd2d632",
        "filename": "mappingservice/neutron/src/main/java/org/opendaylight/lispflowmapping/neutron/intenthandler/util/InfoUtil.java",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 6491
      },
      "writtenOn": "2017-03-16T16:34:28Z",
      "side": 1,
      "message": "It would not add any particular value though. But wouldn\u0027t hurt.",
      "parentUuid": "fafc7978_a781874f",
      "revId": "d061803bb2a03ab3f91fb83f8f7ca33f6572f15a",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}