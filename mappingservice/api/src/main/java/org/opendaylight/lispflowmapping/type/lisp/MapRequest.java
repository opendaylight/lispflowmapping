/*
 * Copyright (c) 2014 Contextream, Inc. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

package org.opendaylight.lispflowmapping.type.lisp;

import java.util.ArrayList;
import java.util.List;

import org.opendaylight.lispflowmapping.type.lisp.address.LispAddress;
import org.opendaylight.lispflowmapping.type.lisp.address.LispNoAddress;

/**
 * <pre>
 *         0                   1                   2                   3
 *         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |Type=1 |A|M|P|S|p|s|    Reserved     |   IRC   | Record Count  |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |                         Nonce . . .                           |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |                         . . . Nonce                           |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |         Source-EID-AFI        |   Source EID Address  ...     |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |         ITR-RLOC-AFI 1        |    ITR-RLOC Address 1  ...    |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |                              ...                              |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |         ITR-RLOC-AFI n        |    ITR-RLOC Address n  ...    |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *      / |   Reserved    | EID mask-len  |        EID-Prefix-AFI         |
 *    Rec +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *      \ |                       EID-Prefix  ...                         |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *        |                   Map-Reply RecMapReplyord  ...                       |
 *        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * </pre>
 *
 * @author gmainzer
 *
 */
public class MapRequest {
    /**
     * A: This is an authoritative bit, which is set to 0 for UDP-based
     * Map-Requests sent by an ITR. It is set to 1 when an ITR wants the
     * destination site to return the Map-Reply rather than the mapping database
     * system.
     */
    private boolean authoritative;

    /**
     * M: This is the map-data-present bit. When set, it indicates that a
     * Map-Reply Record segment is included in the Map-Request.
     */
    private boolean mapDataPresent;

    /**
     * P: This is the probe-bit, which indicates that a Map-Request SHOULD be
     * treated as a Locator reachability probe. The receiver SHOULD respond with
     * a Map-Reply with the probe-bit set, indicating that the Map-Reply is a
     * Locator reachability probe reply, with the nonce copied from the
     * Map-Request. See Section 6.3.2 for more details.
     */
    private boolean probe;

    /**
     * S: This is the Solicit-Map-Request (SMR) bit. See Section 6.6.2 for
     * details.
     */
    private boolean smr;

    /**
     * p: This is the PITR bit. This bit is set to 1 when a PITR sends a
     * Map-Request.
     */
    private boolean pitr;

    /**
     * s: This is the SMR-invoked bit. This bit is set to 1 when an xTR is
     * sending a Map-Request in response to a received SMR-based Map-Request.
     */
    private boolean smrInvoked;

    /**
     * Nonce: This is an 8-octet random value created by the sender of the
     * Map-Request. This nonce will be returned in the Map-Reply. The security
     * of the LISP mapping protocol critically depends on the strength of the
     * nonce in the Map-Request message. The nonce SHOULD be generated by a
     * properly seeded pseudo-random (or strong random) source. See [RFC4086]
     * for advice on generating security- sensitive random data.
     */
    private long nonce;

    /**
     * Source-EID-AFI: This is the address family of the 'Source EID Address'
     * field.
     *
     * Source EID Address: This is the EID of the source host that originated
     * the packet that caused the Map-Request. When Map-Requests are used for
     * refreshing a Map-Cache entry or for RLOC-Probing, an AFI value 0 is used
     * and this field is of zero length.
     */
    private LispAddress sourceEid;

    /**
     * ITR-RLOC-AFI: This is the address family of the 'ITR-RLOC Address' field
     * that follows this field.
     *
     * ITR-RLOC Address: This is used to give the ETR the option of selecting
     * the destination address from any address family for the Map-Reply
     * message. This address MUST be a routable RLOC address of the sender of
     * the Map-Request message.
     */
    /**
     * IRC: This 5-bit field is the ITR-RLOC Count, which encodes the additional
     * number of ('ITR-RLOC-AFI', 'ITR-RLOC Address') fields present in this
     * message. At least one (ITR-RLOC-AFI, ITR-RLOC-Address) pair MUST be
     * encoded. Multiple 'ITR-RLOC Address' fields are used, so a Map-Replier
     * can select which destination address to use for a Map-Reply. The IRC
     * value ranges from 0 to 31. For a value of 0, there is 1 ITR-RLOC address
     * encoded; for a value of 1, there are 2 ITR-RLOC addresses encoded, and so
     * on up to 31, which encodes a total of 32 ITR-RLOC addresses.
     *
     * private byte itrRlocCount;
     */
    private List<LispAddress> itrRlocs;

    /**
     * EID mask-len: This is the mask length for the EID-Prefix.
     *
     * EID-Prefix-AFI: This is the address family of the EID-Prefix according to
     * [AFI].
     *
     * EID-Prefix: This prefix is 4 octets for an IPv4 address family and 16
     * octets for an IPv6 address family. When a Map-Request is sent by an ITR
     * because a data packet is received for a destination where there is no
     * mapping entry, the EID-Prefix is set to the destination IP address of the
     * data packet, and the 'EID mask-len' is set to 32 or 128 for IPv4 or IPv6,
     * respectively. When an xTR wants to query a site about the status of a
     * mapping it already has cached, the EID-Prefix used in the Map-Request has
     * the same mask length as the EID-Prefix returned from the site when it
     * sent a Map-Reply message.
     */
    /**
     * Record Count: This is the number of records in this Map-Request message.
     * A record is comprised of the portion of the packet that is labeled 'Rec'
     * above and occurs the number of times equal to Record Count. For this
     * version of the protocol, a receiver MUST accept and process Map-Requests
     * that contain one or more records, but a sender MUST only send
     * Map-Requests containing one record. Support for requesting multiple EIDs
     * in a single Map-Request message will be specified in a future version of
     * the protocol.
     *
     * private byte recordCount;
     */
    private List<EidRecord> eids;
    final private static LispNoAddress NULL_ADDRESS = new LispNoAddress();

    public MapRequest() {
        eids = new ArrayList<EidRecord>();
        itrRlocs = new ArrayList<LispAddress>();
        sourceEid = NULL_ADDRESS;
    }

    public List<EidRecord> getEids() {
        return eids;
    }

    public LispAddress getSourceEid() {
        return sourceEid;
    }

    public MapRequest setSourceEid(LispAddress sourceEid) {
        if (sourceEid == null) {
            sourceEid = NULL_ADDRESS;
        }
        this.sourceEid = sourceEid;
        return this;
    }

    public long getNonce() {
        return nonce;
    }

    public MapRequest setNonce(long nonce) {
        this.nonce = nonce;
        return this;
    }

    public void addItrRloc(LispAddress itrRloc) {
        this.itrRlocs.add(itrRloc);
    }

    public void addEidRecord(EidRecord record) {
        this.eids.add(record);
    }

    public boolean isAuthoritative() {
        return authoritative;
    }

    public MapRequest setAuthoritative(boolean authoritative) {
        this.authoritative = authoritative;
        return this;
    }

    public boolean isMapDataPresent() {
        return mapDataPresent;
    }

    public MapRequest setMapDataPresent(boolean mapDataPresent) {
        this.mapDataPresent = mapDataPresent;
        return this;
    }

    public boolean isProbe() {
        return probe;
    }

    public MapRequest setProbe(boolean probe) {
        this.probe = probe;
        return this;
    }

    public boolean isSmr() {
        return smr;
    }

    public MapRequest setSmr(boolean smr) {
        this.smr = smr;
        return this;
    }

    public boolean isPitr() {
        return pitr;
    }

    public MapRequest setPitr(boolean pitr) {
        this.pitr = pitr;
        return this;
    }

    public boolean isSmrInvoked() {
        return smrInvoked;
    }

    public MapRequest setSmrInvoked(boolean smrInvoked) {
        this.smrInvoked = smrInvoked;
        return this;
    }

    public List<LispAddress> getItrRlocs() {
        return itrRlocs;
    }

}
