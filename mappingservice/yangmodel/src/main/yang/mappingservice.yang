  module lispflowmapping {
//new
    

    namespace
      "lispflowmapping";

    prefix lispflowmapping;
    
    import ietf-inet-types {
               prefix inet;
               revision-date 2010-09-24;
       }
       
       import ietf-yang-types {
               prefix yang;
               revision-date 2010-09-24;
       }

    organization "LISP Flow Mapping";

    contact 
      "David Goldberg <david.goldberg@contextream.com>
       Vina Ermagan <vermagan@cisco.com>";
      
	
    description
      "YANG version of the mapping service.";

    revision "2013-11-4" {
      description
        "mapping service";
    }
    
    grouping transportAddress{
    	leaf ipAddress {
    		type inet:ip-address;
    	}
    	leaf port {
    		type inet:port-number;
    	}
    }
    	
 	grouping LispSimpleAddress {
    	leaf afi {
    		type int16;
    	}
    	choice simpleAddress {
    	case Ipv4 {
    	leaf Ipv4Address {
    		type inet:ipv4-address;
    		reference "https://tools.ietf.org/html/rfc3209#section-4.6.2.1";
    	}
    	}
    	case Ipv6 {
		leaf Ipv6Address {
    		type inet:ipv6-address;
    	}
    	}
    	case MAC {
      	leaf macAddress {
    		type yang:mac-address;
    	}
    	}
    	case distName {
    		leaf distinguishedName {
    		type string;
    	}
    	}
    }//choice
    }//grouping
    
    
    grouping LcafHeader {
    	leaf LcafAfi {
    		type int16;
    		default 16387;
    	}
       	leaf LcafType{
              type int16;
               reference "http://tools.ietf.org/html/draft-ietf-lisp-lcaf-03";
    	}
    	leaf res2 {
    		type int8;
    	}
    }
    
	    	
	grouping LispAddress {

    	choice LispAddress {
			case simpleAddress {
				uses LispSimpleAddress;
			}

    		case segmentLcaf {
    			reference http://tools.ietf.org/html/draft-ietf-lisp-lcaf-03#section-4.1;
    			uses LcafHeader;
    		   	leaf instanceId {
    				type int32 {
	    			range "0 .. 16777215";
    				}
    			}
	
    			uses LispSimpleAddress;
    		}
    		
    		case sourceDestLacf {
             		reference "http://tools.ietf.org/html/draft-ietf-lisp-lcaf-03#section-4.11";
    			uses LcafHeader;
				container srcAddress {
					uses LispSimpleAddress;
				}
				container dstAddress {
					uses LispSimpleAddress;
				}
				leaf srcMaskLength {
					type int8;
				}
				leaf dstMaskLength {
					type int8;
				}
				leaf reserved {
					type int16;
				}    		
    		}	
    		// TBD Adding the rest of LCAF types here following sourceDest case
    			
	   	}//choice
    }//LispLcafAddress	
	    	
    grouping EidRecords {
    list EidPrefix {
    	uses LispAddress; 
    
    	leaf eidMaskLength {
    		type int8;
    	}
    }
    }
	  
    grouping LocatorRecords {
    list LocatorRecord{
    	key "locator";
    	leaf priority {
    	type int8;
    	}
    	leaf weight {
    	type int8;
    	}
    	leaf multicastPriority {
    	type int8;
    	}
    	leaf multicastWeight {
    	type int8;
    	}
    	leaf localLocator {
    	type boolean;
    	}
    	leaf rlocProbed {
    	type boolean;
    	}
    	leaf routed {
    	type boolean;
    	}
    	container locator {
    		uses LispAddress; 
    	}
    }
    }
    
    grouping EidToLocatorRecords {
	list EidToLocatorRecord {
    	key "prefix";
    	leaf recordTtl {
    	type int32;
    	}
    	leaf eidMaskLength {
    	type int8;
    	}
    	leaf action {
    	type enumeration {
    	enum NoAction;
   		enum NativelyForward;
    	enum SendMapRequest;
    	enum Drop;
    	}
    	}
    	leaf authoritative {
    	type boolean;
	    }
	    container prefix {
	    	uses LispAddress; 
	    }
	    uses LocatorRecords;  
    }
    }
    
    grouping MapRegister {
    container MapRegister {
    reference "http://tools.ietf.org/html/rfc6830#section-6.1.6";
	    leaf recordCount {
	    type int8;
	    }
	    leaf proxyMapReply {
	    type boolean;
	    }
	    leaf wantMapNotify {
	    type boolean;
	    }
	    leaf nounce {
	    type int64;
	    }
	    leaf keyId {
	    type int16;
	    }
	    leaf authenticationData {
	    type binary;
	    }
	    uses EidToLocatorRecords;
    }
    }
  
   
    grouping MapNotify {
    container MapNotify {
    reference "http://tools.ietf.org/html/rfc6830#section-6.1.7";
	    leaf recordCount {
	    type int8;
	    }
	    leaf proxyMapReply {
	    type boolean;
	    }
	    leaf wantMapNotify {
	    type boolean;
	    }
	    leaf nounce {
	    type int64;
	    }
	    leaf keyId {
	    type int16;
	    }
	    leaf authenticationData {
	    type binary;
	    }
	    uses EidToLocatorRecords;
    }
    }
    
    grouping MapRequest {
	container MapRequest {
	reference "http://tools.ietf.org/html/rfc6830#section-6.1.2";
	    leaf recordCount {
	    type int8;
	    }
	    leaf irc {
	    type int8;
	    }
	    leaf authoritative {
	    type boolean;
	    }
	    leaf mapDataPresent {
	    type boolean;
	    }
	    leaf probe {
	    type boolean;
	    }
	    leaf smr {
	    type boolean;
	    }
	    leaf pitr {
	    type boolean;
	    }
	    leaf smrInvoked {
	    type boolean;
	    }
	    
	    leaf nounce {
	    type int64;
	    }
	    container sourceEid {
	    uses LispAddress; 
	    }
	    list itrRlocs {
	    uses LispAddress; 
	    }
	    uses EidRecords;
    }
    }
    
    grouping MapReply {
    container MapReply{
    reference "http://tools.ietf.org/html/rfc6830#section-6.1.4";
	    leaf recordCount {
	    type int8;
	    }
	    leaf probe {
	    type boolean;
	    }
	    leaf echoNonceEnabled {
	    type boolean;
	    }
	    leaf securityEnabled {
	    type boolean;
	    }
	    uses EidToLocatorRecords;    
    }
    }
 
	rpc MapNotifyRpc {
		input {
			uses MapNotify;
			container headerDestAddress{
				uses transportAddress;
			}
			
		}		
	}   
    
	rpc MapReplyRpc {
		input {
			uses MapReply;
			container headerDestAddress{
				uses transportAddress;
			}
		}
	}   

	notification MapRegisterNotification {
	    	uses MapRegister;
		container headerDestAddress{
			uses transportAddress;
		}
    }
    
	notification MapRequestNotification {
		uses MapRequest;
		container headerSrcAddress{
			uses transportAddress;
		}
	    
    }



	 
}
