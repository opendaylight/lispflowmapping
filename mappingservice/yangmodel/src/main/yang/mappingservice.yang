  module lispflowmapping {

    

    namespace
      "lispflowmapping";

    prefix lispflowmapping;
    
    import ietf-inet-types {
               prefix inet;
               revision-date 2010-09-24;
       }

    organization "LISP Flow Mapping";

    contact
      "David Goldberg <david.goldberg@contextream.com>";

    description
      "YANG version of the mapping service.";

    revision "2013-10-31" {
      description
        "mapping service";
    }
    
    grouping LispAFIAddress {
    leaf afi {
               type int16;
       }
    }
    
    grouping LispPrimitiveAddress {
       uses LispAFIAddress;
       choice primitiveAddress {
       case Ipv4 {
       leaf Ipv4Address {
               type inet:ipv4-address;
               reference "https://tools.ietf.org/html/rfc3209#section-4.6.2.1";
       }
       }
       case Ipv6 {
               leaf Ipv6Address {
               type inet:ipv6-address;
       }
       }
       case MAC {
       leaf MacAddress {
               type int64;
               // TBD change to standard MAC type 
       }
       }
       case distName {
               leaf distinguishedName {
               type string;
       }
       }
    }//choice
    }//grouping
    
    grouping LispLcafAddress {
    uses LispAFIAddress;
       leaf LcafType {
               type enumeration{
                       enum Segment;
                       enum SourceDest;
                       enum TE;
               }
       }
       leaf res2 {
               type int8;
       }
    }
    
    grouping LcafSegment {
       uses LispLcafAddress;
       leaf instanceId {
               type uint32{
               range "0 .. 16777215";
               }
       }
       container Address {
               uses LispPrimitiveAddress;
       }
    }
    
    // Primitive Address or SegmentLCAF
    grouping LispSimpleAddress { 
       choice SegmentAddress {
               case Primitive {
                       uses LispPrimitiveAddress;
               }
               case Segment {
                       uses LcafSegment;
               }
       }
    }
    
    

               grouping SourceDestLcaf {
                uses LispLcafAddress;
                       container srcAddress {
                               uses LispSimpleAddress;
                       }
                       container dstAddress {
                               uses LispSimpleAddress;
                       }
                      leaf srcMaskLength {
                               type int8;
                       }
                       leaf dstMaskLength {
                               type int8;
                       }
                       leaf reserved {
                               type int16;
                       }
                       }

       
       grouping LispAddress {
               choice Address {
                       case simpleAddress {
                               uses LispSimpleAddress;
                       }
                       case complexAddress {
                               uses LispLcafAddress;
                       }
               } 
       }
    
    
    typedef LispBaseAddress {
    type empty;
    	description "an address in the mapping service";
    }
    
    grouping EidRecord {
    container Prefix {
    uses LispAddress; 
    }
    leaf mask {
    type int8;
    }
    }
    
    grouping LocatorRecord {
    leaf priority {
    type int8;
    }
    leaf weight {
    type int8;
    }
    leaf multicastPriority {
    type int8;
    }
    leaf multicastWeight {
    type int8;
    }
    leaf localLocator {
    type boolean;
    }
    leaf rlocProbed {
    type boolean;
    }
    leaf routed {
    type boolean;
    }
    container Locator {
    uses LispAddress; 
    }
    }
    
    grouping EidToLocatorRecord {
    leaf recordTtl {
    type int32;
    }
    leaf maskLength {
    type int8;
    }
    leaf action {
    type enumeration {
    enum NoAction;
    enum NativelyForward;
    enum SendMapRequest;
    enum Drop;
    }
    }
    leaf authoritative {
    type boolean;
    }
    container Prefix {
    uses LispAddress; 
    }
    list locatores {
    uses LocatorRecord;
    }
    }
    
    grouping MapRegister {
    leaf recordCount {
    type int8;
    }
    leaf proxyMapReply {
    type boolean;
    }leaf wantMapNotify {
    type boolean;
    }leaf nounce {
    type int64;
    }
    leaf keyId {
    type int16;
    }
    leaf authenticationData {
    type binary;
    }
    list eidToLocatorRecords {
    uses EidToLocatorRecord;
    }
    }
    
    grouping MapNotify {
    leaf recordCount {
    type int8;
    }
    leaf proxyMapReply {
    type boolean;
    }leaf wantMapNotify {
    type boolean;
    }leaf nounce {
    type int64;
    }
    leaf keyId {
    type int16;
    }
    leaf authenticationData {
    type binary;
    }
    list eidToLocatorRecords {
    uses EidToLocatorRecord;
    }
    }
    
    grouping MapRequest {
    leaf recordCount {
    type int8;
    }leaf irc {
    type int8;
    }
    leaf authoritative {
    type boolean;
    }
    leaf mapDataPresent {
    type boolean;
    }
    leaf probe {
    type boolean;
    }
    leaf smr {
    type boolean;
    }
    leaf pitr {
    type boolean;
    }leaf smrInvoked {
    type boolean;
    }leaf nounce {
    type int64;
    }
    container SourceEid {
    uses LispAddress; 
    }
    list itrRlocs {
    container itrRloc {
    uses LispAddress; 
    }
    }
    list eidRecords {
    uses EidRecord;
    }
    
    }
    
    grouping MapReply {
    leaf recordCount {
    type int8;
    }
    leaf probe {
    type boolean;
    }
    leaf echoNonceEnabled {
    type boolean;
    }
    leaf securityEnabled {
    type boolean;
    }
    list eidToLocatorRecords {
    uses EidToLocatorRecord;
    }
    
    }
    
    grouping MapRegisterNotification {
    container MapRegister {
    uses MapRegister;
    }
    leaf address {
    type inet:ip-address;
    }
    leaf port {
    type inet:port-number;
    }
    }
    
    grouping MapNotifyMessage {
    container MapNotify {
    uses MapNotify;
    }
    leaf address {
    type inet:ip-address;
    }
    leaf port {
    type inet:port-number;
    }
    }
    
    grouping MapRequestNotification {
    container MapRequest {
    uses MapRequest;
    }
    leaf address {
    type inet:ip-address;
    }
    leaf port {
    type inet:port-number;
    }
    }
    
    
    grouping MapReplyMessage {
    container MapReply {
    uses MapReply;
    }
    leaf address {
    type inet:ip-address;
    }
    leaf port {
    type inet:port-number;
    }
    }
    
    rpc handleMapNotify {
    input {
    container MapNotifyMessage {
    uses MapNotifyMessage;
    }
    }
    }
    
    rpc handleMapReply {
    input {
    container MapReplyMessage {
    uses MapReplyMessage;
    }
    }
    }
    

	 }
	 
	 
